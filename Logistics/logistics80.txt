#
# logistics:経由地周り、基地に帰る
#

## Scenario settings
Scenario.name = Logistics_80
Scenario.simulateConnections = true
Scenario.updateInterval = 0.1
# 43200s == 12h
Scenario.endTime = 1200

##インターフェース設定
#btInterfaceはここで定義した変数→伝送速度とレンジでデータリンクを定義する
btInterface.type = SimpleBroadcastInterface
btInterface.transmitSpeed = 54M
btInterface.transmitRange = 70

##グループの種類数
Scenario.nrofHostGroups = 4

# Common settings for all groups
Group.router = EpidemicRouter
Group.bufferSize = 500M
Group.waitTime = 60,60
Group.nrofInterfaces = 1
Group.interface1 = btInterface
Group.speed = 25, 30
Group.msgTtl = 300
Group.groupID = d
Group.nofdrones = 100
Group.nofcells = 9
Group.nofpoints = 80

Group1.groupID = Base
Group1.movementModel = StationaryRandomMovementForBase
Group1.nrofHosts = 1
Group1.bufferSize = 500M
Group1.router = EpidemicRouter

Group2.groupID = DataPoint
Group2.movementModel = StationaryRandomMovementForDataPoint
Group2.nrofHosts = 80  

Group3.groupID = Dest
Group3.movementModel = StationaryRandomMovementForDest
Group3.nrofHosts = 100

Group4.groupID = Drone
Group4.movementModel = LogisticDroneMovement
Group4.nrofHosts = 100


## メッセージ生成
# How many event generators
Events.nrof = 1

# イベントの種類
Events1.class = OneToEachMessageGenerator

# メッセージ生成のインターバル
Events1.interval = 0,0

# Message sizes (500kB - 1MB)
Events1.size = 500k,1M

# range of message source/destination addresses
# "x, y" : "x以上y未満" →"0, 1" なら "0以上1未満"
Events1.hosts = 0, 1
Events1.tohosts 1, 81

# Message ID prefix
Events1.prefix = Ma

Events1.time = 0, 0

## Movementmodel用の設定
# シード値
# seed for movement models' pseudo random number generator (default = 0)
MovementModel.rngSeed = 39

# World's size for Movement Models without implicit size (width, height; meters)
MovementModel.worldSize = 9000,9000 
# How long time to move hosts in the world before real simulation
MovementModel.warmup = 1000

## Map based movement -movement model specific settings
MapBasedMovement.nrofMapFiles = 4

MapBasedMovement.mapFile1 = data/roads.wkt
MapBasedMovement.mapFile2 = data/main_roads.wkt
MapBasedMovement.mapFile3 = data/pedestrian_paths.wkt
MapBasedMovement.mapFile4 = data/shops.wkt


##　結果用
# Reports - all report names have to be valid report classes
# how many reports to load
Report.nrofReports = 8
# length of the warm up period (simulated seconds)
Report.warmup = 0
# default directory of reports (can be overridden per Report with output setting)
Report.reportDir = reports/
# Report classes to load
Report.report1 = ContactTimesReport
Report.report2 = ConnectivityONEReport
Report.report3 = MessageDelayReport
Report.report4 = MessageDeliveryReport
Report.report5 = MessageCopyCountReport
MessageCopyCountReport.granularity = 300
Report.report6 = DistanceDelayReport
Report.report7 = MessageStatsReport
Report.report8 = MessageLocationReport
MessageLocationReport.granularity = 300

## Default settings for some routers settings
ProphetRouter.secondsInTimeUnit = 30
SprayAndWaitRouter.nrofCopies = 6
SprayAndWaitRouter.binaryMode = true

## Optimization settings -- these affect the speed of the simulation
## see World class for details.
Optimization.cellSizeMult = 5
Optimization.randomizeUpdateOrder = true

## GUI settings
# GUI underlay image settings
GUI.UnderlayImage.fileName = data/helsinki_underlay.png
# Image offset in pixels (x, y)
GUI.UnderlayImage.offset = 64, 20
# Scaling factor for the image
GUI.UnderlayImage.scale = 4.75
# Image rotation (radians)
GUI.UnderlayImage.rotate = -0.015

# how many events to show in the log panel (default = 30)
GUI.EventLogPanel.nrofEvents = 100
# Regular Expression log filter (see Pattern-class from the Java API for RE-matching details)
#GUI.EventLogPanel.REfilter = .*p[1-9]<->p[1-9]$
